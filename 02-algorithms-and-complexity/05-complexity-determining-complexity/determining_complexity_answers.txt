1.   goodbye_world.rb

          def goodbye_world(n)
           puts "Goodbye World! #{n}"
          end

    Answer:  0(1)  (Constant time complexity) This program always takes the same amount of time to complete.  It is not dependent on size of n.


2.   find_largest.rb

          def find_largest(collection)
           largest = collection[0]
           collection.length.times do |i|
             if collection[i] >= largest
               largest = collection[i]
             end
           end
           largest
          end

    Answer: O(n)  (Linear time complexity).  The program must iterate over the entire collection once. So it is directly dependent on size of array.

3.  find_largest_2D_array.rb

          def find_largest(collection)
           largest = collection[0][0]
           collection.length.times do |i|
             subcollection = collection[i]
             subcollection.length.times do |j|
               if subcollection[j] >= largest
                 largest = subcollection[j]
               end
             end
           end
           largest
          end

      Answer: O(n2)  (Quadratic time complexity).  The program must iterate through the length of the array, then for each, the length of (sub)array.  In other words, n x n  or n^2 iterations.


4.    numbers_recurive.rb

          def numbers(n)
           if (n == 0)
             return 0
           elsif (n == 1)
             return 1
           else
             return numbers(n-1) + numbers(n-2)
           end
          end

      Answer:  O(2^n)   This program generates fibonacci series recursively.  you can think of as tree-- each n, must use the 2 prior leaves to calculate.  So it looks like a binary tree.  (each node has 2 children). The number of nodes doubles at each increase in level.  In other words, the number of calculations doubles each time n increments by 1.


5.    numbers_iterative.rb

          def iterative(n)
           num1 = 0
           num2 = 1

           i = 0
           while i < n-1
             tmp = num1 + num2
             num1 = num2
             num2 = tmp
             i+=1
           end

           num2
          end

      Answer:  O(n)   (Linear time complexity)  This program is a fibonacci series done iteratively.  It must run through n-1 iterations (for large n) which at limit is simply linear: n.

6.    sort.rb

          def sort(collection, from=0, to=nil)
           if to == nil
             # Sort the whole collection, by default
             to = collection.count - 1
           end

           if from >= to
             # Done sorting
             return
           end

           # Take a pivot value, at the far left
           pivot = collection[from]

           # Min and Max pointers
           min = from
           max = to

           # Current free slot
           free = min

           while min < max
             if free == min # Evaluate collection[max]
               if collection[max] <= pivot # Smaller than pivot, must move
                 collection[free] = collection[max]
                 min += 1
                 free = max
               else
                 max -= 1
               end
             elsif free == max # Evaluate collection[min]
               if collection[min] >= pivot # Bigger than pivot, must move
                 collection[free] = collection[min]
                 max -= 1
                 free = min
               else
                 min += 1
               end
             else
               raise "Inconsistent state"
             end
           end

           collection[free] = pivot

           sort collection, from, free - 1
           sort collection, free + 1, to

           collection
          end

      Answer:  O(n^2)     This program is a pivot sort.  The worst case scenario occurs when the elements start out reversely sorted.  So starting with the pivot, would have to go through n times, each n times  (n x n).  So would by n^2 to reverse it.
